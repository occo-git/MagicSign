package com.softigress.magicsigns._system;

import android.content.Context;
import android.media.AudioManager;
import android.media.SoundPool;
import android.util.SparseIntArray;

import com.softigress.magicsigns.R;
import com.softigress.magicsigns._system.Utils.Utils;

public class Audios {

    private final int priority = 1;
    private final int no_loop = 0;
    private final int with_loop = 1;
    private final float normal_playback_rate = 1f;

    private AudioManager audioManager;
    private Context context;
    private SoundPool soundPool;
    private SparseIntArray soundIds;

    public Audios(Context context, AudioManager manager) {
        this.audioManager = manager;
        this.context = context;
        soundPool = new SoundPool(8, AudioManager.STREAM_MUSIC, 100);

        int[] rawIds = new int[]{
                R.raw.ui_item_check01,
                R.raw.ui_item_click09,
                R.raw.ui_dialog_show02,
                R.raw.ui_dialog_hide02,
                R.raw.camera_click,
                R.raw.restart02,

                R.raw.ui_result_fail02,
                R.raw.ui_result_good01,
                R.raw.ui_result_out01,

                R.raw.drop01,
                R.raw.laugh01,
                R.raw.message_down,
                R.raw.message_ok,
                R.raw.message_up,

                R.raw.start02,
                R.raw.cristal01,
                R.raw.inv_pick04,
                R.raw.dna_pick04,
                R.raw.record_break,
                R.raw.explode16,
                R.raw.energy_catch02,
                R.raw.energy_pick16,
                R.raw.bonus08,
                R.raw.potion14,
                R.raw.glass06,
                R.raw.glass08,
                R.raw.glass_bulk02, // final potion sound
                R.raw.punch01,
                R.raw.lightning01,
                R.raw.lightning02,
                R.raw.lightning03,

                /*R.raw.plop01,
                R.raw.plop02,
                R.raw.plop03,
                R.raw.plop04,
                R.raw.plop05,
                R.raw.plop06,
                R.raw.plop07,*/
                R.raw.sign_rise07,

                R.raw.activate10,
                R.raw.miss00,
        };
        loadAudios(rawIds);
    }

    private void loadAudios(int[] rawIds) {
        soundIds = new SparseIntArray();
        for (int rawId : rawIds)
            loadAudio(rawId);
    }

    private void loadAudio(int rawId) {
        int id = soundPool.load(context, rawId, priority);
        soundIds.put(rawId, id);
    }

    private float volume = 1f;
    public void setVolume(float vol) {
        volume = vol;
    }

    public void setVolume(boolean updown) {
        int curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
        curVolume = curVolume + (updown ? 1 : -1);
        Utils.playSoundClick();
        audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 1);
    }

    public void playSound(int id) {
        /*float curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
        float maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        float leftVolume = curVolume / maxVolume;
        float rightVolume = curVolume / maxVolume;*/

        if (audioManager != null && soundPool != null) {
            float curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
            float maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
            float leftVolume = volume * curVolume / maxVolume;
            float rightVolume = volume * curVolume / maxVolume;

            int soundId = soundIds.get(id);
            if (soundId > 0)
                soundPool.play(soundId, leftVolume, rightVolume, priority, no_loop, normal_playback_rate); // returns: streamId
        }
    }

    public void Pause(int streamId) {
        soundPool.pause(streamId);
    }

    public void recycle()
    {
        if (soundIds != null)
            soundIds.clear();

        audioManager = null;
        context = null;
        soundPool = null;
        soundIds = null;
    }
}